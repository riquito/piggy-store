FORMAT: 1A

# PiggyStore

PiggyStore is an application server that let you do basic operation on an S3 (like) bucket.

It has a peculiar authentication: instead of password a new user send some content to use as challenge and an answer to that challenge.
To authenticate, the user request the challenge and provide the answer.
The challenge is supposed to contain the answer, encrypted through a cryptographic algorithm that does not suffer from known-plaintext attack.

# Group Discovery

## Root [/]

### Get starting endpoints [GET]

+ Response 200 (application/json)

        {
            "status": 200,
            "links":  {
                "create_user": {
                    "href": "http://example.com/users/",
                    "rel": "user"
                },
                "request_auth_challenge":  {
                    "href": "http://example.com/auth/answer-challenge",
                    "rel": "auth"
                }
            }
        }

# Group User

## User [/users/]

### Create user [POST]

+ username (string) - username, one or more ascii letters or numbers, underscores and hyphens. Must start with letters or numbers.
+ challenge (string) - a public blob of text that will be presented to anyone that wants to log as this user
+ answer (string) - a private blob of text that has to be provided during authorization in response to the challenge

+ Request (application/json)

        {
            "username": "<foo>",
            "challenge": "<the challenge that the user will have to respond to>",
            "answer": "<the answer that the user will have to give to pass the challenge>"
        }

+ Response 200 (application/json)

        {
            "status": 200,
            "content": {
                "challenge": "<the challenge that the user will have to respond to>",
                "token": "<auth token>",
            },
            "links": {
                "files_list": {
                    "href": "http://example.com/files/",
                    "rel": "file"
                },
                "request_upload_url": {
                    "href": "http://example.com/files/request-upload-url",
                    "rel": "file"
                }
            }
        }

### Delete user [DELETE]

+ Request (application/json)

            Authentication: Bearer <the authorization token>

+ Response 200 (application/json)

        {
            "status": 200,
            "links": {
                "create_user": {
                    "href": "http://example.com/users/",
                    "rel": "user"
                }
            }
        }

# Group Authentication

## Authentication [/auth/]

### Ask for the challenge [GET /auth/request-challenge{?username}]

+ Request (application/json)

+ Parameters
    + username: `foo` (string, required) - the username you"re requesting the challenge for.

+ Response 200 (application/json)

        {
            "status": 200,
            "content": {
                "challenge": "<the challenge that the user will have to respond to>"
            },
            "links": {
                "answer_auth_challenge": {
                    "rel": "auth",
                    "href": "http://example.com/auth/answer-challenge"
                },
                "create_user": {
                    "rel": "user",
                    "href": "http://example.com/users/"
                }
            }
        }

### Answer user's challenge [POST /auth/answer-challenge]

+ username (string) - the username of the user you want to access to
+ answer (string) - the content that was provided when creating the user

+ Request (application/json)

        {
            "username": "<foo>",
            "answer": "<the answer that was provided when creating the user>"
        }

+ Response 200 (application/json)

        {
            "status": 200,
            "content": {
                "token": "<auth token>"
            },
            "links": {
                "request_upload_url": {
                    "rel": "file",
                    "href": "http://example.com/files/request-upload-url"
                },
                "files_list": {
                    "rel": "file",
                    "href": "http://example.com/files/"
                }
            }
        }


# Group Files

Resources related to files in the API.

## Files [/files/]

### Retrieve the list of the user's files [GET]

+ Request (application/json)

            Authentication: Bearer <the authentication token>

+ Response 200 (application/json)

        {
            "status": 200,
            "content": [
                {
                    "links": {
                        "read": {
                            "rel": "file",
                            "href": "http://<s3-like-server>/bucket-test/users/foo/file1"
                        },
                        "delete": {
                            "rel": "file",
                            "href": "http://example.com/files/"
                        }
                    },
                    "content": {
                        "checksum": "9297ab3fbd56b42f6566284119238125",
                        "filename": "file1",
                        "size": 9,
                        "url": "http://<s3-like-server>/bucket-test/users/foo/file1"
                    }
                },
                {
                    "links": {
                        "read": {
                            "rel": "file",
                            "href": "http://<s3-like-server>/bucket-test/users/foo/file2"
                        },
                        "delete": {
                            "rel": "file",
                            "href": "http://example.com/files/"
                        }
                    },
                    "content": {
                        "checksum": "6685cd62b95f2c58818cb20e7292168b",
                        "filename": "file2",
                        "size": 9,
                        "url": "http://<s3-like-server>/bucket-test/users/foo/file2"
                    }
                }
            ]
        }

### Remove a file [DELETE]

+ Parameters:

    + filename: "some file name" (string) - the name of the file to delete


+ Request (application/json)

    + Headers

             Authentication: Bearer <the authorization token>

    + Body

            {
                "filename": "<the name of the file to delete>"
            }


+ Response 200 (application/json)

        {
            "status": 200
        }

### Request upload url [POST /files/request-upload-url]

+ Request (application/json)

    + Headers

            Authentication: Bearer <the authorization token>

    + Body

            {
                "filename": "<the name of the file to upload>"
            }


+ Response 200 (application/json)

        {
            "links": {
                "upload_url": {
                    "rel": "file",
                    "href": <the url where to upload the file to>
                }
            }
        }
